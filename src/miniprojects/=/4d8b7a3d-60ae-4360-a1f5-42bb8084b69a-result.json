{"name": "Verify that codepen registered page is opened ", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=124.0.6367.62)\nStacktrace:\n0   chromedriver                        0x0000000100e3a934 chromedriver + 4368692\n1   chromedriver                        0x0000000100e32dc8 chromedriver + 4337096\n2   chromedriver                        0x0000000100a56c04 chromedriver + 289796\n3   chromedriver                        0x0000000100a31918 chromedriver + 137496\n4   chromedriver                        0x0000000100abdab8 chromedriver + 711352\n5   chromedriver                        0x0000000100ad0d08 chromedriver + 789768\n6   chromedriver                        0x0000000100a8dab4 chromedriver + 514740\n7   chromedriver                        0x0000000100a8e50c chromedriver + 517388\n8   chromedriver                        0x0000000100dfee50 chromedriver + 4124240\n9   chromedriver                        0x0000000100e03c40 chromedriver + 4144192\n10  chromedriver                        0x0000000100de4818 chromedriver + 4016152\n11  chromedriver                        0x0000000100e04570 chromedriver + 4146544\n12  chromedriver                        0x0000000100dd62cc chromedriver + 3957452\n13  chromedriver                        0x0000000100e23eb8 chromedriver + 4275896\n14  chromedriver                        0x0000000100e24034 chromedriver + 4276276\n15  chromedriver                        0x0000000100e32a28 chromedriver + 4336168\n16  libsystem_pthread.dylib             0x00000001819d2f94 _pthread_start + 136\n17  libsystem_pthread.dylib             0x00000001819cdd34 thread_start + 8", "trace": "@pytest.mark.smoke\n    @allure.title(\"Verify that codepen registered page is opened \")\n    @allure.description(\"TC#1 - simple enter all email,password,confirm password and click submit button.\")\n    def test_open_CodePen():\n        driver = webdriver.Chrome()\n        driver.get(\"https://cdpn.io/AbdullahSajjad/fullpage/LYGVRgK?anon=true&view=fullpage\")\n        time.sleep(5)\n        driver.switch_to.frame(driver.find_element(By.ID, \"result\"))\n        element_email = driver.find_element(By.XPATH, \"//input[@id='email']\")\n        element_email.send_keys(\"vani.v3509@gmail.com\")\n        time.sleep(3)\n>       element_password = driver.find_element(By.XPATH,\"//input[@id='password']\")\n\ntest_Assignment3.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107953110>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...0001819d2f94 _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x00000001819cdd34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=124.0.6367.62)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100e3a934 chromedriver + 4368692\nE       1   chromedriver                        0x0000000100e32dc8 chromedriver + 4337096\nE       2   chromedriver                        0x0000000100a56c04 chromedriver + 289796\nE       3   chromedriver                        0x0000000100a31918 chromedriver + 137496\nE       4   chromedriver                        0x0000000100abdab8 chromedriver + 711352\nE       5   chromedriver                        0x0000000100ad0d08 chromedriver + 789768\nE       6   chromedriver                        0x0000000100a8dab4 chromedriver + 514740\nE       7   chromedriver                        0x0000000100a8e50c chromedriver + 517388\nE       8   chromedriver                        0x0000000100dfee50 chromedriver + 4124240\nE       9   chromedriver                        0x0000000100e03c40 chromedriver + 4144192\nE       10  chromedriver                        0x0000000100de4818 chromedriver + 4016152\nE       11  chromedriver                        0x0000000100e04570 chromedriver + 4146544\nE       12  chromedriver                        0x0000000100dd62cc chromedriver + 3957452\nE       13  chromedriver                        0x0000000100e23eb8 chromedriver + 4275896\nE       14  chromedriver                        0x0000000100e24034 chromedriver + 4276276\nE       15  chromedriver                        0x0000000100e32a28 chromedriver + 4336168\nE       16  libsystem_pthread.dylib             0x00000001819d2f94 _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x00000001819cdd34 thread_start + 8\n\n../../.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchWindowException"}, "description": "TC#1 - simple enter all email,password,confirm password and click submit button.", "start": 1713841412122, "stop": 1713841421521, "uuid": "d2621551-1a7c-4d48-8e45-ef421587fb94", "historyId": "8e328f6be43628f25de114cc98233754", "testCaseId": "8e328f6be43628f25de114cc98233754", "fullName": "test_Assignment3#test_open_CodePen", "labels": [{"name": "tag", "value": "smoke"}, {"name": "suite", "value": "test_Assignment3"}, {"name": "host", "value": "Aravinds-Mac-mini.local"}, {"name": "thread", "value": "3668-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_Assignment3"}]}